"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[321],{560:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var r=t(7462),n=(t(7294),t(3905)),s=(t(8209),t(814));const d={},i="Controller",a={unversionedId:"contributing/development-guide/coding/api/features/controllers",id:"contributing/development-guide/coding/api/features/controllers",title:"Controller",description:"A controller receive a request, then call a use case, end return a response.",source:"@site/docs/contributing/development-guide/coding/api/features/01-controllers.md",sourceDirName:"contributing/development-guide/coding/api/features",slug:"/contributing/development-guide/coding/api/features/controllers",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/controllers",draft:!1,editUrl:"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contributing/development-guide/coding/api/features/01-controllers.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding features",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/"},next:{title:"Use cases",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/use-cases"}},p={},l=[],u={toc:l};function c(e){let{components:o,...t}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,t,{components:o,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"controller"},"Controller"),(0,n.kt)("p",null,"A controller receive a request, then call a use case, end return a response. "),(0,n.kt)(s.Z,{language:"jsx",mdxType:"CodeBlock"},'from typing import List\n\nfrom fastapi import APIRouter, Depends\nfrom starlette.responses import JSONResponse\n\nfrom common.responses import create_response\nfrom features.todo.interfaces.TodoRepositoryInterface import TodoRepositoryInterface\nfrom infrastructure.get_repository import get_todo_repository\n\nfrom .use_cases.add_todo import AddTodoRequest, AddTodoResponse, add_todo_use_case\nfrom .use_cases.delete_todo_by_id import DeleteTodoByIdResponse, delete_todo_use_case\nfrom .use_cases.get_todo_all import GetTodoAllResponse, get_todo_all_use_case\nfrom .use_cases.get_todo_by_id import GetTodoByIdResponse, get_todo_by_id_use_case\nfrom .use_cases.update_todo import (\n    UpdateTodoRequest,\n    UpdateTodoResponse,\n    update_todo_use_case,\n)\n\nrouter = APIRouter(tags=["todos"], prefix="/todos")\n\n\n@router.post("", operation_id="create", response_model=AddTodoResponse)\n@create_response(JSONResponse)\ndef add_todo(data: AddTodoRequest, todo_repository: TodoRepositoryInterface = Depends(get_todo_repository)):\n    return add_todo_use_case(data=data, todo_repository=todo_repository).dict()\n\n\n@router.get("/{id}", operation_id="get_by_id", response_model=GetTodoByIdResponse)\n@create_response(JSONResponse)\ndef get_todo_by_id(id: str, todo_repository: TodoRepositoryInterface = Depends(get_todo_repository)):\n    return get_todo_by_id_use_case(id=id, todo_repository=todo_repository).dict()\n\n\n@router.delete("/{id}", operation_id="delete_by_id", response_model=DeleteTodoByIdResponse)\n@create_response(JSONResponse)\ndef delete_todo_by_id(id: str, todo_repository: TodoRepositoryInterface = Depends(get_todo_repository)):\n    return delete_todo_use_case(id=id, todo_repository=todo_repository).dict()\n\n\n@router.get("", operation_id="get_all", response_model=List[GetTodoAllResponse])\n@create_response(JSONResponse)\ndef get_todo_all(todo_repository: TodoRepositoryInterface = Depends(get_todo_repository)):\n    return [todo.dict() for todo in get_todo_all_use_case(todo_repository=todo_repository)]\n\n\n@router.put("/{id}", operation_id="update_by_id", response_model=UpdateTodoResponse)\n@create_response(JSONResponse)\ndef update_todo(\n    id: str, data: UpdateTodoRequest, todo_repository: TodoRepositoryInterface = Depends(get_todo_repository)\n):\n    return update_todo_use_case(id=id, data=data, todo_repository=todo_repository).dict()\n'),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Required"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The controller needs to be decorated with the create_response decorator, that handles exception handling and returns unified response type."),(0,n.kt)("li",{parentName:"ul"},"The controller needs to have set the response_model and request_model, that is used to generate API documentation and used for validation."))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Optional")," ",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Add ",(0,n.kt)("a",{parentName:"li",href:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/repositories"},"repository implementations")," to handle communication to external services such as databases and inject the repository implementations to the controller endpoint and pass the injected repository implementations to the use case")))))}c.isMDXComponent=!0},8209:(e,o,t)=>{t(7294)}}]);