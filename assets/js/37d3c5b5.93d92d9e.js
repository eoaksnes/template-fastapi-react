"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[969],{9250:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var o=i(7462),n=(i(7294),i(3905)),d=(i(8209),i(814));const r={},s="Repositories",c={unversionedId:"contributing/development-guide/coding/api/adding-infrastructure/repositories",id:"contributing/development-guide/coding/api/adding-infrastructure/repositories",title:"Repositories",description:"Create concrete implementations of repository interfaces.",source:"@site/docs/contributing/development-guide/coding/api/adding-infrastructure/02-repositories.md",sourceDirName:"contributing/development-guide/coding/api/adding-infrastructure",slug:"/contributing/development-guide/coding/api/adding-infrastructure/repositories",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/repositories",draft:!1,editUrl:"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contributing/development-guide/coding/api/adding-infrastructure/02-repositories.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Clients",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/clients"},next:{title:"Generate API clients",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/generate-api-clients"}},a={},l=[],m={toc:l};function p(e){let{components:t,...i}=e;return(0,n.kt)("wrapper",(0,o.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"repositories"},"Repositories"),(0,n.kt)("p",null,"Create concrete implementations of repository interfaces."),(0,n.kt)(d.Z,{language:"jsx",mdxType:"CodeBlock"},'from typing import Optional\n\nfrom entities.TodoItem import TodoItem\nfrom features.todo.interfaces.TodoRepositoryInterface import TodoRepositoryInterface\nfrom infrastructure.clients.ClientInterface import ClientInterface\n\n\ndef to_dict(todo_item: TodoItem):\n    dict = todo_item.__dict__\n    dict["_id"] = todo_item.id\n    return dict\n\n\nclass TodoRepository(TodoRepositoryInterface):\n    client: ClientInterface\n\n    def __init__(self, client: ClientInterface):\n        self.client = client\n\n    def update(self, todo_item: TodoItem) -> TodoItem:\n        updated_todo_item = self.client.update(todo_item.id, to_dict(todo_item))\n        return TodoItem.from_dict(updated_todo_item)\n\n    def delete(self, todo_item_id: str) -> None:\n        self.client.delete(todo_item_id)\n\n    def delete_all(self) -> None:\n        self.client.delete_collection(self.client.collection_name)\n\n    def get(self, todo_item_id: str) -> TodoItem:\n        todo_item = self.client.get(todo_item_id)\n        return TodoItem.from_dict(todo_item)\n\n    def create(self, todo_item: TodoItem) -> Optional[TodoItem]:\n        inserted_todo_item = self.client.create(to_dict(todo_item))\n        return TodoItem.from_dict(inserted_todo_item)\n\n    def get_all(self) -> list[TodoItem]:\n        todo_items = []\n        for item in self.client.list():\n            todo_items.append(TodoItem.from_dict(item))\n        return todo_items\n\n    def find_one(self, filter: dict) -> Optional[TodoItem]:\n        todo_item = self.client.find_one(filter)\n        if todo_item:\n            return TodoItem.from_dict(todo_item)\n        return None\n'))}p.isMDXComponent=!0},8209:(e,t,i)=>{i(7294)}}]);