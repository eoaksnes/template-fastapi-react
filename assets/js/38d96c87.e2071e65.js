"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[285],{8439:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var i=o(7462),r=(o(7294),o(3905)),n=(o(8209),o(814));const a={},s="Repository interfaces",d={unversionedId:"contributing/development-guide/coding/api/features/repository-interfaces",id:"contributing/development-guide/coding/api/features/repository-interfaces",title:"Repository interfaces",description:"Repositories takes entities and returns entities, hides storage details. Can work against local, remote, data services or third party services.",source:"@site/docs/contributing/development-guide/coding/api/features/03-repository-interfaces.md",sourceDirName:"contributing/development-guide/coding/api/features",slug:"/contributing/development-guide/coding/api/features/repository-interfaces",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/repository-interfaces",draft:!1,editUrl:"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contributing/development-guide/coding/api/features/03-repository-interfaces.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use cases",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/use-cases"},next:{title:"Adding infrastructure",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/"}},c={},p=[],m={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,i.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"repository-interfaces"},"Repository interfaces"),(0,r.kt)("p",null,"Repositories takes entities and returns entities, hides storage details. Can work against local, remote, data services or third party services."),(0,r.kt)(n.Z,{language:"jsx",mdxType:"CodeBlock"},"from abc import ABCMeta, abstractmethod\nfrom typing import Optional\n\nfrom entities.TodoItem import TodoItem\n\n\nclass TodoRepositoryInterface(metaclass=ABCMeta):\n    @abstractmethod\n    def create(self, todo_item: TodoItem) -> Optional[TodoItem]:\n        raise NotImplementedError\n\n    @abstractmethod\n    def get(self, todo_item_id: str) -> TodoItem:\n        raise NotImplementedError\n\n    @abstractmethod\n    def update(self, todo_item: TodoItem) -> TodoItem:\n        raise NotImplementedError\n\n    @abstractmethod\n    def delete(self, todo_item_id: str):\n        raise NotImplementedError\n\n    @abstractmethod\n    def get_all(self) -> list[TodoItem]:\n        raise NotImplementedError\n"))}u.isMDXComponent=!0},8209:(e,t,o)=>{o(7294)}}]);