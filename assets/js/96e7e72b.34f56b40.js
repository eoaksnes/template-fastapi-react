"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[173],{3581:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>d,metadata:()=>c,toc:()=>l});var n=i(7462),o=(i(7294),i(3905)),a=(i(8209),i(814));const d={},s="Adding entities",c={unversionedId:"contributing/development-guide/coding/api/entities",id:"contributing/development-guide/coding/api/entities",title:"Adding entities",description:"Entities form the domain model of the application.",source:"@site/docs/contributing/development-guide/coding/api/02-entities.md",sourceDirName:"contributing/development-guide/coding/api",slug:"/contributing/development-guide/coding/api/entities",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/entities",draft:!1,editUrl:"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contributing/development-guide/coding/api/02-entities.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extending the API",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/"},next:{title:"Adding features",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/features/"}},r={},l=[],p={toc:l};function m(t){let{components:e,...i}=t;return(0,o.kt)("wrapper",(0,n.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"adding-entities"},"Adding entities"),(0,o.kt)("p",null,"Entities form the domain model of the application."),(0,o.kt)("p",null,"An entity can be an object with methods, or it can be a set of data structures and functions. Should be a regular class, dataclasses, or value objects (if all the properties are the same, the objects are identical). Entities  holds data (state) and logic reusable for various applications. "),(0,o.kt)(a.Z,{language:"jsx",mdxType:"CodeBlock"},'from dataclasses import asdict, dataclass, fields\n\n\n@dataclass(frozen=True)\nclass TodoItem:\n    id: str\n    title: str\n    is_completed: bool = False\n\n    def to_dict(self):\n        return asdict(self)\n\n    @classmethod\n    def from_dict(cls, dict_) -> "TodoItem":\n        class_fields = {f.name for f in fields(cls)}\n        if "_id" in dict_:\n            dict_["id"] = dict_.pop("_id")\n        data = {k: v for k, v in dict_.items() if k in class_fields}\n        return TodoItem(**data)\n'),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Entity does not depend on anything except possibly other entities. "),(0,o.kt)("p",{parentName:"admonition"},"Entities should be the most stable code within your application. "),(0,o.kt)("p",{parentName:"admonition"},"Entities should not be affected by any change external to them.")))}m.isMDXComponent=!0},8209:(t,e,i)=>{i(7294)}}]);