"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[559],{2881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>d,metadata:()=>r,toc:()=>c});var i=n(7462),a=(n(7294),n(3905)),o=(n(8209),n(814));const d={},s="Clients",r={unversionedId:"contributing/development-guide/coding/api/adding-infrastructure/clients",id:"contributing/development-guide/coding/api/adding-infrastructure/clients",title:"Clients",description:"The template already ships with a mongo database client for connecting to MongoDB databases. However, if you need a client that can talk to e.g. PostgreSQL you need to add this.",source:"@site/docs/contributing/development-guide/coding/api/adding-infrastructure/01-clients.md",sourceDirName:"contributing/development-guide/coding/api/adding-infrastructure",slug:"/contributing/development-guide/coding/api/adding-infrastructure/clients",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/clients",draft:!1,editUrl:"https://github.com/equinor/template-fastapi-react/tree/main/documentation/docs/contributing/development-guide/coding/api/adding-infrastructure/01-clients.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adding infrastructure",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/"},next:{title:"Repositories",permalink:"/template-fastapi-react/docs/contributing/development-guide/coding/api/adding-infrastructure/repositories"}},l={},c=[],u={toc:c};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"clients"},"Clients"),(0,a.kt)("p",null,"The template already ships with a mongo database client for connecting to MongoDB databases. However, if you need a client that can talk to e.g. PostgreSQL you need to add this."),(0,a.kt)(o.Z,{language:"jsx",mdxType:"CodeBlock"},'from typing import Dict, List, Optional\n\nfrom pymongo import MongoClient\nfrom pymongo.collection import Cursor\nfrom pymongo.database import Database\nfrom pymongo.errors import DuplicateKeyError\n\nfrom common.exceptions import NotFoundException, ValidationException\nfrom infrastructure.clients.ClientInterface import ClientInterface\n\n\nclass MongoDatabaseClient(ClientInterface[Dict, str]):\n    def __init__(self, collection_name: str, database_name: str, client: MongoClient):\n        database: Database = client[database_name]\n        self.database = database\n        self.collection_name = collection_name\n        self.collection = database[collection_name]\n\n    def wipe_db(self):\n        databases = self.database.client.list_database_names()\n        databases_to_delete = [\n            database_name for database_name in databases if database_name not in ("admin", "config", "local")\n        ]  # Don\'t delete the mongo admin or local database\n        for database_name in databases_to_delete:\n            self.database.client.drop_database(database_name)\n\n    def delete_collection(self, collection: str):\n        self.database[collection].drop()\n\n    def create(self, document: Dict) -> Dict:\n        try:\n            result = self.collection.insert_one(document)\n            return self.get(str(result.inserted_id))\n        except DuplicateKeyError:\n            raise ValidationException(message=f"The document with id \'{document[\'_id\']}\' already exists")\n\n    def list(self) -> List[dict]:\n        return list(self.collection.find())\n\n    def get(self, uid: str) -> Dict:\n        document = self.collection.find_one(filter={"_id": uid})\n        if document is None:\n            raise NotFoundException\n        else:\n            return dict(document)\n\n    def update(self, uid: str, document: Dict) -> Dict:\n        if self.collection.find_one(filter={"_id": uid}) is None:\n            raise NotFoundException(extra={"uid": uid})\n        self.collection.replace_one({"_id": uid}, document)\n        return self.get(uid)\n\n    def delete(self, uid: str) -> bool:\n        return self.collection.delete_one(filter={"_id": uid}).acknowledged\n\n    def find(self, filters: Dict) -> Cursor:\n        return self.collection.find(filter=filters)\n\n    def find_one(self, filters: Dict) -> Optional[Dict]:\n        return self.collection.find_one(filter=filters)\n\n    def insert_many(self, items: List[Dict]):\n        return self.collection.insert_many(items)\n\n    def delete_many(self, query: Dict):\n        return self.collection.delete_many(query)\n'))}f.isMDXComponent=!0},8209:(e,t,n)=>{n(7294)}}]);